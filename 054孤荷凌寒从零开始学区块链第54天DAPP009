孤荷凌寒自学第140天
区块链054天Dapp009

【主要内容】
今天继续学习实战，做一个真正的依托于智能合约的DAPP。今天继续独立完善一个众筹的合约。共耗时48分钟。
（此外整理作笔记花费了约73分钟）
详细学习过程见文末学习过程屏幕录像。

搜索到提供帮助的博文：
1.关于solidity向合约调用者返回结构体或结构体数组的问题
https://ask.csdn.net/questions/672546
https://blog.csdn.net/qq_33829547/article/details/81385653
https://blog.csdn.net/dieju8330/article/details/82964580

2.关于solidity的数组问题
http://cw.hubwiz.com/card/c/ethereum-FAQ/1/1/3/
https://blog.csdn.net/mongo_node/article/details/81002238
https://www.jianshu.com/p/8e3da36fe587

3.关于solidity的数据类型的转换问题
https://blog.csdn.net/lj900911/article/details/83037625
https://www.cnblogs.com/xiaocongcong888/p/9829592.html
http://wiki.jikexueyuan.com/project/solidity-zh/types.html


【尝试向外部合约调用者返回当前已有多少节点捐款】
先是定义了一个状态变量：
```
uint public giftcount=0; 

```
然后，在有人捐款时，进行统计计数，关键是去重（就是说有的节点不止一次捐款）
```
    function donate() public payable{
        if(now < endtime && total < goal && msg.value > (0.3*(10**18))){
            //每个节点至少捐赠众筹0.3个eth
            if(gift[msg.sender]==gift(0)){ //判断此节点是否之前已经捐过款项
                giftcount+=1 //统计已经有多少节点参与捐助，而且要去重节点。
                alladd[alladd.length++] = msg.sender; //在地址数组中记录下当前地址
                //上一句报错：Expected token Semicolon got 'Identifier'
            }
            gift[msg.sender] += msg.value; //在gift表中记录下当前节点增加了一定的捐赠金额（这意味着一个节点可以多次调用合约进行捐赠）
            total += msg.value; //让目前的实际众筹余额增加            
        }

    }

```
计数部分的操作似乎没有 问题，至少没有 报错。

【尝试向外部合约调用者返回所有已参与节点的列表及捐赠代币总数】
（一）先是想向外部合约调用者返回
节点->捐赠代币总数
这样的结构体数组，这样信息更全面。
经过搜索发现，这其实是不可行的：
1.部分文章认为，不要说向外部返回结构体数组，就是返回结构体都不行
要返回结构体的话，还得将结构体打散分多个单个变量返回；
2.部分文章认为，向外部返回结构体是可以的，且可以通过js代码解析，但返回结构体数组是不行的。
（二）然后我就想，不如将地址和捐赠金额都转换成字符串，然后拼命再返回出去吧
结果发现没有办法将address类型转换为string，还发现string居然本身就是一种字节数组。
这下就只好放弃了。

(三)最后就想，那就只返回一个只包含参与节点的地址数组吧
https://www.jianshu.com/p/8e3da36fe587
按此博文的方法，试图得到一个不断自动增长的数组来存放这些地址，结果报错，查询了很多相关介绍数组的文章，还没有理解到任何有用的信息。


【最终修改后的合约内容】
```
pragma solidity ^0.4.7;

contract ZongChouCeshi{
    address owner; //此变量记录下合约部署者（拥有者）的地址
    uint public goal; //要众筹的目标金额（当然这儿指的是eth）
    uint public endtime; //是指此众筹的时长(是一个无符号整数，单位是秒），如果在从部署合约之日加上此天数后的日期期限内达到目的金额，则说明众筹目标达到，合约部署者可以取走所有众筹金额，否则就由参与众筹者自己退回自己那份钱。
    uint public total=0; //这是实际众筹到的金额
    uint public giftcount=0; //记录下有多少节点参与了，不知道怎么检查去重。对映射类型的变量了解不够
    
    address[] public alladd=new address[](1);

    mapping(address=>uint) gift; //每个参与众筹的节点地址实际捐赠的金额，即地址对应的金额
    
    //下面是合约的建构函数（只在部署时执行一次）
    //部署合约时，手动指定众筹的目标金额与众筹的时长（总数)
    function ZongChouCeshi(uint _goal, uint _time) public{
        owner = msg.sender;
        goal = _goal;
        endtime = now + _time;
        //变量 now 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。
        //来自博文：https://www.jianshu.com/p/4b8e943ce7f2
    }
    
    //调用合约的用户节点参与众筹，向合约地址转账一定数量的eth
    //这个函数给我的疑惑是，没有体现（像自己发的代币合约中的那样）登记eth余额双方的变化
    //初步理解是：
    //因为使用的代币正是eth本身，因此当调用此合约的节点在进行转移eth操作时，eth网络本身已经记录并广播完成了eth代币余额在两个节点之间的移动
    function donate() public payable{
        if(now < endtime && total < goal && msg.value > (0.3*(10**18))){
            //每个节点至少捐赠众筹0.3个eth
            if(gift[msg.sender]==gift(0)){ //判断此节点是否之前已经捐过款项
                giftcount+=1 //统计已经有多少节点参与捐助，而且要去重节点。
                alladd[alladd.length++] = msg.sender; //在地址数组中记录下当前地址
                //上一句报错：Expected token Semicolon got 'Identifier'
            }
            gift[msg.sender] += msg.value; //在gift表中记录下当前节点增加了一定的捐赠金额（这意味着一个节点可以多次调用合约进行捐赠）
            total += msg.value; //让目前的实际众筹余额增加            
        }

    }
    
    //如果众筹成功，即在规定的时间内，众筹了大于等于goal预设数量金额的eth，那么证明成功，则合约的部署节点可以取走这笔eth到合约部署节点的账户上。
    function draw() public{
        //首先要保证本次调用合约及调用本函数的节点是合约部署者。
        //确实判断众筹目标已经达成。
        if(msg.sender == owner && total > goal){
            bool isok=owner.send(address(this).balance); //执行转账，从合约地址转到部署合约的节点地址            
        }

        //eth代币的转账书写方法是非常简洁的:
        //接收转账金额的节点.transfer(转账金额)
        //这样指定【转账金额】的eth就会转移给【接收转账金额的节点】
    }
    
    //如果众筹失败，则参与众筹的节点可以调用合约的本方法来取回自己的捐赠
    function withdraw() public{
        //只有当众筹时间已过，本函数才可被调用
        //确定判断众筹已经失败。
        if(now > endtime && total < goal){
            uint amount = gift[msg.sender]; //获取当前调用合约的节点之前总共捐赠的eth的总金额
            total -= amount; //从总金额中减少当前调用合约节点准备取回的eth金额
            gift[msg.sender] = 0; //在gift表中，登记当前调用合约节点新的捐赠金额为0
            bool isok=address(msg.sender).send(amount); //当前调用合约的节点之前总共捐赠的eth的总金额转移回当前调用合约的节点            
        }

    }

    //查询当前已筹集资金总额：
    function getTotal() public constant returns(uint){
        return total;
    }

    //查询当前合约节点自己的余额（这实际上就是total的数量，不过额外增加一个函数来查询）
    function getContractBalance() public constant returns(uint){
        return address(this).balance;
    }

    //查询截止日期,返回的是结束 日期那天的时间戳的一个无符号整数（32位的），需要调用此合约函数的调用方自己用前端 语言来进行处理
    function getEndTimeStamp() public constant returns(uint){
        return endtime;
    }

    //查询当前调用合约的节点已经总共捐助了多少eth
    function getGiftBalance() public constant returns(uint){
        return gift[msg.sender];
    }

    //查询已经有多少人捐助
    function getGiftCount() public constant returns(uint){
        return giftcount; 
    }

    //查询指定的节点已经总共捐助了多少eth
    function getGiftBalanceFrom(address a) public constant returns(uint){
        return gift[a];
    }

}

```

github: https://github.com/lhghroom/Self-learning-blockchain-from-scratch 
原文地址：https://www.941xue.com/content.aspx?id=1581
【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 



【同步语音笔记】
https://www.ximalaya.com/keji/19103006/334894978 

【学习过程屏幕录屏】
https://www.bilibili.com/video/BV1qz4y1D7Et/ 

