孤荷凌寒自学第146天
区块链059天Dapp015
【主要内容】
今天继续学习实战，做一个真正的依托于智能合约的DAPP。今天继续独立完善一个众筹的合约。共耗时31分钟。
（此外整理作笔记花费了约54分钟）
详细学习过程见文末学习过程屏幕录像。


【测试生成的新合约无法向合约转eth】
这时候通过metamask钱包向合约转eth时发现不能成功，提示：
Error encountered during contract execution
百度翻译为：
合同执行过程中遇到错误
于是直到
out of gas
把所有gas消耗殆尽，也没有成功转账。
这个错误直直泼了我一盆冷水，不得不开始冷静思考 ，是不是代码太复杂，就会出错 ，于是决定弄一个小型的合约代码来试。

【用小代码尝试】
写了一个最简单的合约代码：
```
pragma solidity ^0.4.24;
contract Refund {

    address public owner;
    uint256 total;

    constructor() public {
        owner = msg.sender;
    }

    function () payable public {
        total+=msg.value;
    }
    
}
```
就算代码再简单，然而不管怎么测试，都一个失败连着一个失败。始终不行。
后来干脆想，回退函数中什么都不保留得了，就一个空的回调函数再试——
于是合约代码成了下面这个样子——
```
pragma solidity ^0.4.24;
contract Refund {

    address public owner;
    uint256 total;

    constructor() public {
        owner = msg.sender;
    }

    function () payable public {
    }
    
}
```
再次部署，重新尝试，不料一转账合约就收到了！！
难道就不允许 在回退函数的函数体中加上任何代码了吗？
我决定加大gas量来测试，直到终于：
gas limit  50000
gas value 20
终于测试成功了。
对此的目前的推测是——应当是这个ROPSTEN测试网络环境的某些原因造成的。

【加大gas后重新在原先的智能合约上测试还是失败】
然而回到之前的智能合约不管增加多少gas这下子，都还是不能直接给智能合约成功转账了。
错误如前，这时不得不让我怀疑，原先的回退函数是不是真的写得太复杂了？
于是开始删减——
```
    function () payable public{
        //require(now < endtime);
        //require(total < goal);
        //require(msg.data.length == 0); //只接收没有数据传输的纯发送代币的事务调用，此语句检查数据部分是否 为空
        //require(msg.value > 0);
        //每个节点至少捐赠大于0个eth
        //if(gift[msg.sender]==0){ //判断此节点是否之前已经捐过款项
        //    giftcount+=1; //统计已经有多少节点参与捐助，而且要去重节点。
        //    alladd[alladd.length++] = msg.sender; //在地址数组中记录下当前地址,
        //    alladd.push(msg.sender);
        //}
        //gift[msg.sender] += msg.value; //在gift表中记录下当前节点增加了一定的捐赠金额（这意味着一个节点可以多次调用合约进行捐赠）
        total += msg.value; //让目前的实际众筹余额增加    

    }
```
这一次重新部署后，真的就成功了——这让我真的无法理解这一切的机理究竟是怎样的，完全一头雾水。
今天最后完整的合约代码如下：
```
pragma solidity ^0.4.25;

contract ZongChouCeshi{
    address owner; //此变量记录下合约部署者（拥有者）的地址
    uint goal; //要众筹的目标金额（当然这儿指的是eth）
    uint endtime; //是指此众筹的时长(是一个无符号整数，单位是秒），如果在从部署合约之日加上此天数后的日期期限内达到目的金额，则说明众筹目标达到，合约部署者可以取走所有众筹金额，否则就由参与众筹者自己退回自己那份钱。
    uint256 total=0; //这是实际众筹到的金额
    uint giftcount=0; //记录下有多少节点参与了，不知道怎么检查去重。对映射类型的变量了解不够
    
    address[] public alladd=new address[](1); //这儿必须写上(1)，不然报错如下：
    //Type function (uint256) returns (address[] memory) is not implicitly convertible to expected type address[] storage ref.

    mapping(address=>uint) gift; //每个参与众筹的节点地址实际捐赠的金额，即地址对应的金额
    
    //下面是合约的建构函数（只在部署时执行一次）
    //部署合约时，手动指定众筹的目标金额与众筹的时长（总数)
    constructor() public{
        owner = msg.sender;
        goal = 50000000;
        endtime = now + 100800;
        //变量 now 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。
        //来自博文：https://www.jianshu.com/p/4b8e943ce7f2
    }
    
    //直接使用回退函数来接收
    //调用合约的用户节点参与众筹，向合约地址转账一定数量的eth
    //这个函数给我的疑惑是，没有体现（像自己发的代币合约中的那样）登记eth余额双方的变化
    //初步理解是：
    //因为使用的代币正是eth本身，因此当调用此合约的节点在进行转移eth操作时，eth网络本身已经记录并广播完成了eth代币余额在两个节点之间的移动
    function () payable public{
        //require(now < endtime);
        //require(total < goal);
        //require(msg.data.length == 0); //只接收没有数据传输的纯发送代币的事务调用，此语句检查数据部分是否 为空
        //require(msg.value > 0);
        //每个节点至少捐赠大于0个eth
        //if(gift[msg.sender]==0){ //判断此节点是否之前已经捐过款项
        //    giftcount+=1; //统计已经有多少节点参与捐助，而且要去重节点。
        //    alladd[alladd.length++] = msg.sender; //在地址数组中记录下当前地址,
        //    alladd.push(msg.sender);
        //}
        //gift[msg.sender] += msg.value; //在gift表中记录下当前节点增加了一定的捐赠金额（这意味着一个节点可以多次调用合约进行捐赠）
        total += msg.value; //让目前的实际众筹余额增加    

    }
    
    //如果众筹成功，即在规定的时间内，众筹了大于等于goal预设数量金额的eth，那么证明成功，则合约的部署节点可以取走这笔eth到合约部署节点的账户上。
    function draw() public{
        //首先要保证本次调用合约及调用本函数的节点是合约部署者。
        //确实判断众筹目标已经达成。
        require(msg.sender == owner);
        require(total >= goal);
        require(now>endtime);
        owner.transfer(address(this).balance); //执行转账，从合约地址转到部署合约的节点地址
        

        //eth代币的转账书写方法是非常简洁的:
        //接收转账金额的节点.transfer(转账金额)
        //这样指定【转账金额】的eth就会转移给【接收转账金额的节点】
    }
    
    //如果众筹失败，则参与众筹的节点可以调用合约的本方法来取回自己的捐赠
    function withdraw() public{
        //只有当众筹时间已过，本函数才可被调用
        //确定判断众筹已经失败。
        require(total < goal);
        require(now>endtime);
        uint amount = gift[msg.sender]; //获取当前调用合约的节点之前总共捐赠的eth的总金额
        total -= amount; //从总金额中减少当前调用合约节点准备取回的eth金额
        gift[msg.sender] = 0; //在gift表中，登记当前调用合约节点新的捐赠金额为0
        address(msg.sender).transfer(amount); //当前调用合约的节点之前总共捐赠的eth的总金额转移回当前调用合约的节点            

    }

    //查询当前已筹集资金总额：
    function getTotal() public constant returns(uint){
        return total;
    }

    //查询当前合约节点自己的余额（这实际上就是total的数量，不过额外增加一个函数来查询）
    function getContractBalance() public constant returns(uint){
        return address(this).balance;
    }

    //查询截止日期,返回的是结束 日期那天的时间戳的一个无符号整数（32位的），需要调用此合约函数的调用方自己用前端 语言来进行处理
    function getEndTimeStamp() public constant returns(uint){
        return endtime;
    }

    //查询当前调用合约的节点已经总共捐助了多少eth
    function getGiftBalance() public constant returns(uint){
        return gift[msg.sender];
    }

    //查询已经有多少人捐助
    function getGiftCount() public constant returns(uint){
        return giftcount; 
    }

    //查询指定的节点已经总共捐助了多少eth
    function getGiftBalanceFrom(address a) public constant returns(uint){
        return gift[a];
    }

    //返回已参与节点的数组
    function getalladdress() public constant returns(address[]){
        return alladd;
    }

}

```

github: https://github.com/lhghroom/Self-learning-blockchain-from-scratch 
原文地址：https://www.941xue.com/content.aspx?id=1601

【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 



【同步语音笔记】
https://www.ximalaya.com/keji/19103006/336674734 


【学习过程屏幕录屏】
https://www.bilibili.com/video/BV1sZ4y1u7h2/ 

