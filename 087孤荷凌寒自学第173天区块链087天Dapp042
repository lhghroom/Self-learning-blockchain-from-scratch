孤荷凌寒自学第173天区块链087天Dapp042
【主要内容】
今天继续学习实战，开始做一个博彩类的赌大小的智能合约。共耗时25分钟。
（此外整理作笔记花费了约20分钟）
详细学习过程见文末学习过程屏幕录像。


【继续修改一个dapp的合约代码】
今天已修改完成的情况：
```
pragma solidity ^0.4.25;

contract dudaxiao{
    //原合约是一次性合约，就是只能参与一次。
    struct jilu{
        uint time; //开奖时间
        uint result; //开奖的那个数字 
        uint peilv; //赢了一局后的赔率，这儿暂时没有理解
    }

    uint private createmeblocknumber; //创建合约时的以太坊网络区块高度
    address private owner; //合约部署节点
    bool private isstopthis; //是否已经停止本合约
    bool private iscanxiazhu; //是否可以下注，就是判断是否是一轮游戏的中间过程，原合约表示合约只使用一次，只投注一次即可。
    unit private yingli; //赢利，这儿暂时没有理解

    //---下面申明只存放一次参与过程参与节点信息的节点地址数组
    address[] private addsmall; //所有押小的地址
    address[] private addbig; //所有押大的地址

    //--下面存放的是各参与节点押的金额的maping对象变量 
    //--就是说，下面的mapping记录下了每一个参与游戏的节点投注的金额
    mapping(address -> uint) private bigmap; //此mapping中记录了每一个压大的节点投注的金额
    mapping(address -> uint) private smallmap; //此mapping中记录了每一个压小的节点投注的金额

    //定义记录此次（因为本合约只玩一次）游戏的开奖结果
    Result private r;

    //下面开始定义函数修改器
    //判断合约是否已经不再执行了（就是说已经不能再参与游戏了，游戏已经结束 ）
    modifier onlyIfNotStopped{
        require(isstopthis==false);
        _;
    }    

    //判断合约是否允许下注，就是说现在还可以下注吗？
    modifier canXiaZhu{
        require(iscanxiazhu==true);
        _;
    }

    //判断当前调用合约的节点是否是部署合约的节点
    modifier onlyOwner{
        require(msg.sender==owner);
        _;
    }

    function dudaxiao() public{
        //这是合约初始化函数，只在部署时执行一次的函数
        //--记录下当前合约部署时的以太坊的块高度
        createmeblocknumber=block.number; //当前块的Index
        onwer=msg.sender; //部署合约时的节点地址
        isstopthis=false; //合约还没有停用
        iscanxiazhu=true; //当前还可以下注
        yingli=0;

    }

    //下面定义的是接收eth转入的两个函数
    //回退函数来接收eth
    function () public payable{
        xiazhu(msg.data.length > 0); //如果发起转账交易时有数据，则认为是赌大
    }

    //专门的下注函数用以接收eth
    function xiazhu(bool isda) public payable{
        require(isstopthis==false);
        require(iscanxiazhu==true);
        //现在需要看一下，节点参与此游戏时，是否给足了赌注
        uint v=msg.value; //这儿先获取到取得的金额，默认单位是wei
        require(v >= 10 finney);
        address a=msg.sender;
        //判断是赌大，还是赌小
        if(isda==true){
            //如果是赌大
            //添加到赌大的地址与金额对照表中
            bigmap[a] += v; //这种写法意味着同一个节点可以多次下注
            AddAddress(a,addbig);
        }else{
            //如果是赌小
            smallmap[a] += v; //这种写法意味着同一个节点可以多次下注
            AddAddress(a,addsmall);

        }
    }

    function AddAddress(address a,address[] storage arr) internal {
  
        //最后声明本函数的关键词为：internal，表示 可以被本身和子合约调用（在一个合约 调用另一个合约时，也需要声明为internal）
        //因为形参中有storage关键词的，函数本身就必须被声明为internal或Private
        //https://blog.csdn.net/liyuechun520/article/details/78408608
        for(uint i = 0; i < arr.length; i ++){
            if(arr[i]==a){
                return; //如果数组中已经登记过这个节点地址了，那么，就不用再添加了
            }
        }
        //如果上面没有从数组中，找到这个节点地址，那么就添加进数组
        arr.push(a);

    }

    





}

```


github: https://github.com/lhghroom/Self-learning-blockchain-from-scratch 
原文地址：https://www.941xue.com/content.aspx?id=1672  


【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 



【同步语音笔记】
https://www.ximalaya.com/keji/19103006/347879676 

【学习过程屏幕录屏】
https://www.bilibili.com/video/BV1uC4y1t7bW/ 


