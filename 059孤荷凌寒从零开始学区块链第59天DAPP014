孤荷凌寒自学第145天
认识区块链059
【主要内容】
今天继续学习实战，做一个真正的依托于智能合约的DAPP。今天继续独立完善一个众筹的合约。共耗时31分钟。
（此外整理作笔记花费了约54分钟）
详细学习过程见文末学习过程屏幕录像。


【尝试将合约接收eth的函数转为用回退函数】
所参照的博文如下：
https://blog.csdn.net/dieju8330/article/details/83149164
https://www.cnblogs.com/tinyxiong/p/9645519.html
https://solidity.readthedocs.io/en/develop/contracts.html#fallback-function
http://me.tryblockchain.org/blockchain-solidity-fallback.html
https://my.oschina.net/u/3790537/blog/1808769
现在的用以接收eth的回退函数如下：
```
    //直接使用回退函数来接收
    //调用合约的用户节点参与众筹，向合约地址转账一定数量的eth
    //这个函数给我的疑惑是，没有体现（像自己发的代币合约中的那样）登记eth余额双方的变化
    //初步理解是：
    //因为使用的代币正是eth本身，因此当调用此合约的节点在进行转移eth操作时，eth网络本身已经记录并广播完成了eth代币余额在两个节点之间的移动
    function () payable public{
        require(now < endtime);
        require(total < goal);
        require(msg.data.length == 0); //只接收没有数据传输的纯发送代币的事务调用，此语句检查数据部分是否 为空
        require(msg.value >0);
        //每个节点至少捐赠大于0个eth
        if(gift[msg.sender]==0){ //判断此节点是否之前已经捐过款项
            giftcount+=1; //统计已经有多少节点参与捐助，而且要去重节点。
            //alladd[alladd.length++] = msg.sender; //在地址数组中记录下当前地址,
            alladd.push(msg.sender);
        }
        gift[msg.sender] += msg.value; //在gift表中记录下当前节点增加了一定的捐赠金额（这意味着一个节点可以多次调用合约进行捐赠）
        total += msg.value; //让目前的实际众筹余额增加    

    }

```
今天部署合约没有得到 回复，花了很长的时间 ，直到学习结束都没有完成 。

【修改了与合约交互的html页面的js代码】
```
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>我要众筹</title>
    <script language="javascript" type="text/javascript" src="jquery.min.js"></script>
    <script language="javascript" type="text/javascript" src="web3.min.js"></script>
    <!-- 1. Include cryptozombies_abi.js here -->
    <script language="javascript" type="text/javascript" src="zongchou_abi.js"></script>

    <script>
// 格式化日期，如月、日、时、分、秒保证为2位数
function formatNumber (n) {
    n = n.toString()
    return n[1] ? n : '0' + n;
}
// 参数number为毫秒时间戳，format为需要转换成的日期格式
function formatTime (number, format) {
    let time = new Date(number)
    let newArr = []
    let formatArr = ['Y', 'M', 'D', 'h', 'm', 's']
    newArr.push(time.getFullYear())
    newArr.push(formatNumber(time.getMonth() + 1))
    newArr.push(formatNumber(time.getDate()))

    newArr.push(formatNumber(time.getHours()))
    newArr.push(formatNumber(time.getMinutes()))
    newArr.push(formatNumber(time.getSeconds()))

    for (let i in newArr) {
        format = format.replace(formatArr[i], newArr[i])
    }
    return format;
}

            //声明一些钱包地址：
            //下面一行定义的是部署合约的节点（创世节点）的信息，公钥
            var wallet_address="0x5227C3EF48B5A1bcF784593e46D9579D26a3b592"; //狐狸钱包的公钥，就是钱包地址，是eth网络上的一个节点。
            //下面一行定义的是节点2的信息
            var w2add="0xe2d6c2f289c53B5aEA44C47293Ba179a3bfa21f0"; //公钥
    
            //下面一行定义的是节点3 的信息
            var w3add="0xb40599fB0366DCf0ffe86677b005b3f20Dfa29aE"; //公钥
    
            //下面一行定义的是节点4 的信息
            var w4add="0x70c8461366d5368B1E79CBFc2Acf4ba56C745977"; //公钥
    
    
   
            // 2. Start code here
            var cc;
            var web3;

            //本次发布的智能合约查询地址：https://ropsten.etherscan.io/tx/0xe82ccf786786f61a13a00d136f0cae73542906c23e22cc55df95a2773f818888
            var heyueAddress = "0x410594034bd867416011937e86d72d398afede83"; //要连接的合约地址

            function startApp() {
                try {
                    var ccc=web3.eth.contract(zongchouABI);
                    cc=ccc.at(heyueAddress); //https://www.cnblogs.com/tinyxiong/p/9046626.html
                    //cc =new web3.eth.contract(cryptozombiesABI, cryptoZombiesAddress); //如果是另一个版本可能还得加上new关键字。
                    alert(typeof cc);
    
                } catch (err) {
                    alert(err);
                }
                alert("加载成功");
                
            }
    
            //async () => 

        //现在这种通过we3.min.js来加载钱包连接的方法，在metamask钱包和麦子钱包中都测试通过。
        window.addEventListener('load',function() {
        try{
            if (typeof web3 !== 'undefined') {
                web3 = new Web3(web3.currentProvider);
                startApp();
            } else {
                //$('#app_loading').hide();
                //alert(jQuery.i18n.prop('lrn_error_alert'));
                //mathWallet.closePage();
                alert("这儿没有钱包环境。");
            }

        }catch(err){
            alert(err);
        }
        });

    
            //----------------下面是自定义的与合约交互的函数-------------------------
            //--查询总金额---
            function gettotal(){
                try{
                    cc.getTotal(function(error, result){  //https://www.jianshu.com/p/15ff9da4dd8d
                    if(!error)
                    {
                        $("#total").html("已获得众筹总金额：" + result);
                       //alert(result);
                    }
                    else{
                        //alert(error);
                        $("#total").html('获取出错：' + error);
                    }});
                    //return "ok"
                    $("#total").html('正在获取。。。');
                }catch(err){
                    $("#total").html('出错 ：' + err);
                }
            }

            //--查询总金额---
            function gettotal2(){
                try{
                    cc.getContractBalance(function(error, result){  //https://www.jianshu.com/p/15ff9da4dd8d
                    if(!error)
                    {
                        $("#total2").html("合约地址代币余额：" + result);
                       //alert(result);
                    }
                    else{
                        //alert(error);
                        $("#total2").html('获取出错：' + error);
                    }});
                    //return "ok"
                    $("#total2").html('正在获取。。。');
                }catch(err){
                    $("#total2").html('出错 ：' + err);
                }
            }
    

            //查询本次授权的结束日期和时间
            function getEndTimeStamp(){
                try{
                    cc.getEndTimeStamp(function(error, result){  //https://www.jianshu.com/p/15ff9da4dd8d
                        if(!error)
                    {
                        t=formatTime(result * 1000,"Y-M-D h:m:s");
                        $("#endtime").html("本次众筹截止时间：" + t);
                       //alert(result);
                    }
                    else{
                        //alert(error);
                        $("#endtime").html('获取出错：' + error);
                    }});
                    //return "ok"
                    $("#endtime").html('正在获取。。。');
                }catch(err){
                    alert("使用授权代币转移时出错 ：" + err)
                    return err;
                }
            }

            //参与众筹---
            function dodate(intvalue){
                try{

                    var message = {to:heyueAddress, value: web3.toWei(intvalue, 'ether')};

                    web3.eth.sendTransaction(message, (err, res) => {
                        var output = "";
                        if (!err) {
                            output += res;
                        } else {
                            output = err;
                        }
                        document.getElementById('doback').innerHTML = "Transaction response= " + output + "<br />";
                    })
                    return "ok";
                }catch(err){
                    document.getElementById('doback').innerHTML = "Transaction response= " + output + "<br />";
                    return err;
                }
            }



            //--------------------------调用测试---------------------------------------
            //--查询total
            function cmdone_click(){
                try{
                    gettotal();
                }catch(err){
                    alert(err);
                }
            }

            //--查询total2
            function cmdone2_click(){
                try{
                    gettotal2();
                }catch(err){
                    alert(err);
                }
            }
    
            //--查询本次众筹的结束日期和时间----
            function cmdtwo_click(){
                try{
                    getEndTimeStamp();
                }catch(err){
                    alert(err);
                }
            }

            //--参与众筹-------------
            function cmddo_click(){
                try{
                    var strls=document.getElementById("txtvalue").value;
                    if(/^[0-9]+\.?[0-9]+?$/.test(strls)){
                        var fls=parseFloat(strls);
                        //var intls=fls * (10**18);
                        dodate(fls);
                    }else{
                        alert('只能输入数字');
                    }
                }catch(err){
                    alert(err);
                }
            }



    
        </script>
        
</head>
<body>
    <div>
        <input type="button" value="查询当前众筹总金额" id="cmdone" name="cmdone" onclick="cmdone_click();" />
        <span id="total" name="total"></span>
        <br /><br />
        <input type="button" value="查询当前众筹总金额" id="cmdone2" name="cmdone2" onclick="cmdone2_click();" />
        <span id="total2" name="total2"></span>
        <br /><br />
        <input type="button" value="查询此众筹的截止日期和时间" id="cmdtwo" name="cmdtwo" onclick="cmdtwo_click();" />
        <span id="endtime" name="endtime"></span>
        <br /><br />
        <input type="button" value="我要入筹" id="cmddo" name="cmddo" onclick="cmddo_click();" />
        <input type="text" value="0.3" id="txtvalue" name="txtvalue" />eth
        <br />
        <span id="doback" name="doback"></span>
        <br /><br />


    </div>
    
</body>
</html>

```

【今天最终完成的智能合约的代码】
```
pragma solidity ^0.4.25;

#本次发布的智能合约查询地址：https://ropsten.etherscan.io/tx/0xe82ccf786786f61a13a00d136f0cae73542906c23e22cc55df95a2773f818888

contract ZongChouCeshi{
    address owner; //此变量记录下合约部署者（拥有者）的地址
    uint public goal; //要众筹的目标金额（当然这儿指的是eth）
    uint public endtime; //是指此众筹的时长(是一个无符号整数，单位是秒），如果在从部署合约之日加上此天数后的日期期限内达到目的金额，则说明众筹目标达到，合约部署者可以取走所有众筹金额，否则就由参与众筹者自己退回自己那份钱。
    uint public total=0; //这是实际众筹到的金额
    uint public giftcount=0; //记录下有多少节点参与了，不知道怎么检查去重。对映射类型的变量了解不够
    
    address[] public alladd=new address[](1); //这儿必须写上(1)，不然报错如下：
    //Type function (uint256) returns (address[] memory) is not implicitly convertible to expected type address[] storage ref.

    mapping(address=>uint) gift; //每个参与众筹的节点地址实际捐赠的金额，即地址对应的金额
    
    //下面是合约的建构函数（只在部署时执行一次）
    //部署合约时，手动指定众筹的目标金额与众筹的时长（总数)
    constructor() public{
        owner = msg.sender;
        goal = 50000000;
        endtime = now + 100800;
        //变量 now 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。
        //来自博文：https://www.jianshu.com/p/4b8e943ce7f2
    }
    
    //直接使用回退函数来接收
    //调用合约的用户节点参与众筹，向合约地址转账一定数量的eth
    //这个函数给我的疑惑是，没有体现（像自己发的代币合约中的那样）登记eth余额双方的变化
    //初步理解是：
    //因为使用的代币正是eth本身，因此当调用此合约的节点在进行转移eth操作时，eth网络本身已经记录并广播完成了eth代币余额在两个节点之间的移动
    function () payable public{
        require(now < endtime);
        require(total < goal);
        require(msg.data.length == 0); //只接收没有数据传输的纯发送代币的事务调用，此语句检查数据部分是否 为空
        require(msg.value >0);
        //每个节点至少捐赠大于0个eth
        if(gift[msg.sender]==0){ //判断此节点是否之前已经捐过款项
            giftcount+=1; //统计已经有多少节点参与捐助，而且要去重节点。
            //alladd[alladd.length++] = msg.sender; //在地址数组中记录下当前地址,
            alladd.push(msg.sender);
        }
        gift[msg.sender] += msg.value; //在gift表中记录下当前节点增加了一定的捐赠金额（这意味着一个节点可以多次调用合约进行捐赠）
        total += msg.value; //让目前的实际众筹余额增加    

    }
    
    //如果众筹成功，即在规定的时间内，众筹了大于等于goal预设数量金额的eth，那么证明成功，则合约的部署节点可以取走这笔eth到合约部署节点的账户上。
    function draw() public{
        //首先要保证本次调用合约及调用本函数的节点是合约部署者。
        //确实判断众筹目标已经达成。
        require(msg.sender == owner);
        require(total >= goal);
        require(now>endtime);
        owner.transfer(address(this).balance); //执行转账，从合约地址转到部署合约的节点地址
        

        //eth代币的转账书写方法是非常简洁的:
        //接收转账金额的节点.transfer(转账金额)
        //这样指定【转账金额】的eth就会转移给【接收转账金额的节点】
    }
    
    //如果众筹失败，则参与众筹的节点可以调用合约的本方法来取回自己的捐赠
    function withdraw() public{
        //只有当众筹时间已过，本函数才可被调用
        //确定判断众筹已经失败。
        require(total < goal);
        require(now>endtime);
        uint amount = gift[msg.sender]; //获取当前调用合约的节点之前总共捐赠的eth的总金额
        total -= amount; //从总金额中减少当前调用合约节点准备取回的eth金额
        gift[msg.sender] = 0; //在gift表中，登记当前调用合约节点新的捐赠金额为0
        address(msg.sender).transfer(amount); //当前调用合约的节点之前总共捐赠的eth的总金额转移回当前调用合约的节点            

    }

    //查询当前已筹集资金总额：
    function getTotal() public constant returns(uint){
        return total;
    }

    //查询当前合约节点自己的余额（这实际上就是total的数量，不过额外增加一个函数来查询）
    function getContractBalance() public constant returns(uint){
        return address(this).balance;
    }

    //查询截止日期,返回的是结束 日期那天的时间戳的一个无符号整数（32位的），需要调用此合约函数的调用方自己用前端 语言来进行处理
    function getEndTimeStamp() public constant returns(uint){
        return endtime;
    }

    //查询当前调用合约的节点已经总共捐助了多少eth
    function getGiftBalance() public constant returns(uint){
        return gift[msg.sender];
    }

    //查询已经有多少人捐助
    function getGiftCount() public constant returns(uint){
        return giftcount; 
    }

    //查询指定的节点已经总共捐助了多少eth
    function getGiftBalanceFrom(address a) public constant returns(uint){
        return gift[a];
    }

    //返回已参与节点的数组
    function getalladdress() public constant returns(address[]){
        return alladd;
    }

}

```



【关于坚持自学的例行说明】
最后例行说明下，我为什么要坚持自学。

“如果我不曾见过太阳，我本可以忍受黑暗，然而阳光已使我的荒凉，成为更新的荒凉。”
——艾米莉·狄金森
如果要问我对自己的前半生如何看待时，我想昨天和今天的答案都将完全不同。
昨天的我，生活在荒凉的满意之中，自觉怡然自得，拿着包身包月的工资，听着仁慈的命令，过着几乎一成不变的生活；时而与周遭的人儿和睦互往，时而唇舌相抵斤斤计较，演出着生活的鸡毛蒜皮，工作的吹拉弹唱；忘我，忘我，才能融入这平和无奇的乐章中，迈着细碎的步伐，原地踏步。那时的我觉得这就是悠然自得的听天由命的平凡人生，也就是我的宿命了。
可是某一天，我见到了不一样的太阳以及太阳下不一样的人生光景——那并不荒凉。
今天的我，生活在荒凉的痛苦之中，自觉渴望改变，迈着不知所措的步伐，看着流逝的年华，睁着悔恨错失一切的双眼… …
我知道我将再无法回到过去的我，只有改变才是唯一正确的方向。

一、为什么一把年纪还在学习
放弃很多去聚餐，去HI歌，去游玩，去看电影，去追剧……的时间，然后进行着这个年纪似乎已不应当再进行的学习，引来身边人们无尽的不解与鄙夷甚至可怜……
但我不想放弃终身学习的誓言。
因为——
我对我今天的生活现状并不认同！
罗伯特清崎告诉过我们，反省自己当下的生活是不是自己想要的，这难道不是最好的动力与答案？
走过了大半生，然后才发现曾经、当下所正在进行的人生并不是自己想要的，那是一种怎样的体验？
只有心中真切的感受才能回答这个问题，而任凭再丰富的语言也是无法描绘出来的。
经历半生的跋涉，却发现走得并不正确，有多少人有勇气承认自己过去的一切都是错误的呢？
而我愿意告诉过去的我：“你错了！”
那么已经历半生错误，年岁之大又压于头顶，还有希望从这架的梯子的半端重新爬下，再蹒跚着爬上另一架梯子吗？
我宁愿相信还有希望！
这便是我为什么要继续坚持终身学习下去的全部理由。

二、这个年纪还在学这些技术有意义吗
纯的技术对这把年纪其实已没有意义。
但兴趣可以超越意义。
但技术可以引来思想的变革，这才是意义。
投资自己的头脑 ，改革自己的思想，这是最保值，更长远的投资，过去我从来没有投资过，错过太多，那就从投资自己头脑开始吧。
罗伯特清崎告诉我们，真正的富有是时间的富有；真正的自由是可以决定自己愿意做什么的自由。
因为我愿意做我兴趣所在的事，所以我希望我有自由选择的那一天，虽然今天离那一天可能还是那么遥远，但我愿意相信，每天多赶几步，离希望就更近一步。
再者，虽然我可能再已无法完全完整的掌握这些技术了，但技术本身却可以启迪心的觉醒，激发灵感，那么只要多了解一点，我相信我将离那个正离我而去跑得越来越快的未来更近一点，不至于被未知的那个未来抛弃得太远。
于是我怎能放弃追逐求索的步伐？
我要坚信：感觉太迟的时候，也许还不算太迟。

github: https://github.com/lhghroom/Self-learning-blockchain-from-scratch 
原文地址：https://www.941xue.com/content.aspx?id=1600  
【欢迎大家加入[就是要学]社群】
如今，这个世界的变化与科技的发展就像一个机器猛兽，它跑得越来越快，跑得越来越快，在我们身后追赶着我们。
很多人很早就放弃了成长，也就放弃了继续奔跑，多数人保持终身不变的样子，原地不动，成为那猛兽的肚中餐——当然那也不错，在猛兽的逼迫下，机械的重复着自我感觉还良好地稳定工作与生活——而且多半感觉不到这有什么不正常的地方，因为在猛兽肚子里的是大多数人，就好像大多数人都在一个大坑里，也就感觉不出来这是一个大坑了，反而坑外的世界显得有些不大正常。
为什么我们不要做坑里的大多数人？
因为真正的人生，应当有百万种可能 ；因为真正的一生可以有好多辈子组成，每一辈子都可以做自己喜欢的事情；因为真正的人生，应当有无数种可以选择的权利，而不是总觉得自己别无选择。因为我们要成为一九法则中为数不多的那个一；因为我们要成为自己人生的导演而不是被迫成为别人安排的戏目中的演员。
【请注意】
就是要学社群并不会告诉你怎样一夜暴富！也不会告诉你怎样不经努力就实现梦想！
【请注意】
就是要学社群并没有任何可以应付未来一切变化的独门绝技，也没有值得吹嘘的所谓价值连城的成功学方法论！
【请注意】
社群只会互相帮助，让每个人都看清自己在哪儿，自己是怎样的，重新看见心中的梦想，唤醒各自内心中的那个英雄，然后勇往直前，成为自己想要成为的样子！
期待与你并肩奔赴未来！
www.941xue.com 
QQ群：646854445 （【就是要学】终身成长）
 


【同步语音笔记】
https://www.ximalaya.com/keji/19103006/336361324 

【学习过程屏幕录屏】
https://www.bilibili.com/video/BV1SK4y1s7PU/ 

